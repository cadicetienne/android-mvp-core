apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

ext._user = System.getenv("BINTRAY_USER")
ext._key =  System.getenv("BINTRAY_API_KEY")
ext._passphrase = System.getenv("BINTRAY_PASSPHRASE")

if(project.rootProject.file('local.properties').exists() && (_user == null || _user.isEmpty())){
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    _user = properties.getProperty("bintray.user")
    _key = properties.getProperty("bintray.apikey");
    _passphrase = properties.getProperty("bintray.gpg.password")
}

def getPublicationName(variant) {
    return variant.flavorName.equalsIgnoreCase('noDagger') ? project.ext.artifact : "${project.ext.artifact}-dagger"
}

def configPublish(variant) {
    def pomConfig = {
        licenses {
            license {
                name licenseName
                url licenseUrl
            }
        }
        developers {
            developer {
                id developerId
                name developerName
                email developerEmail
            }
        }
        scm {
            connection gitUrl
            developerConnection gitUrl
            url siteUrl
        }
    }

    return tasks.create("${variant.name}ConfigPublish") {
        def publicationName = getPublicationName(variant)

        publishing.publications {

            // Skip debug publishing
            if (variant.buildType.name == "debug") {
                return
            }

            // Gets the product flavor version
            def flavorVersion = "${variant.productFlavors.get(0).ext.flavorVersion}"

            def javaDocOutputDir = file("${buildDir}/docs/javadoc/${publicationName}")
            def sourceDirs = variant.sourceSets.collect {
                it.javaDirectories
            }
            def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
                description "Generates Javadoc for ${variant.name}."
                source = variant.javaCompile.source // Yes, javaCompile is deprecated,
                // but I didn't find any working alternative. Please, tweet @Louis_CAD if you find one.
                destinationDir = javaDocOutputDir
                classpath += files(android.getBootClasspath().join(File.pathSeparator))
                classpath += files(configurations.compile)
                options.links("http://docs.oracle.com/javase/7/docs/api/");
                options.links("http://d.android.com/reference/");
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
                failOnError false
            }
            def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
                description "Puts Javadoc for ${variant.name} in a jar."
                archiveName = "${publicationName}-${flavorVersion}-javadoc.jar"
                classifier = 'javadoc'
                from javadoc.destinationDir
            }
            def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
                description "Puts sources for ${variant.name} in a jar."
                archiveName = "${publicationName}-${flavorVersion}-sources.jar"
                from sourceDirs
                classifier = 'sources'
            }

            // Creates a publication for current flavor
            "$publicationName"(MavenPublication) {
                groupId project.ext.publishedGroupId
                artifactId = publicationName
                version flavorVersion

                // artifact to upload
                def fileName = getAarFileNameForVariant(variant)
                artifact("$buildDir/outputs/aar/${fileName}")
                artifact sourcesJar
                artifact javadocJar

                // adds pom data
                pom.withXml {
                    asNode().appendNode('description', 'A set of default views (Activity and Fragment) to use with mvp-core')

                    // creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames = ["releaseCompile", 'compile', "${variant.flavorName}Compile", "${variant.flavorName}ReleaseCompile"]

                    configurationNames.each { configurationName ->
                        // iterates over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations[configurationName].allDependencies.each {
                            if (it.group != null && it.group != '' && it.group != 'unspecified'
                                    && it.name != null && it.name != '' && it.name != 'unspecified' && it.version != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                    asNode().children().last() + pomConfig
                }

                def capitalizedName = "$publicationName".capitalize()
                dependsOn "generatePomFileFor${capitalizedName}Publication"
            }
        }
    }
}

def configBintray(variant) {
    group = publishedGroupId
    version = "${variant.productFlavors.get(0).ext.flavorVersion}"

    return tasks.create("${variant.flavorName}Bintray") {
        def publicationName = getPublicationName(variant)

        bintray {
            user = _user
            key = _key
            publications = ["${publicationName}"]

            override = true
            pkg {
                repo = bintrayRepo
                name = "${publicationName}"
                desc = libraryDescription
                userOrg = orgName
                websiteUrl = siteUrl
                vcsUrl = gitUrl
                licenses = allLicenses
                publish = true
                publicDownloadNumbers = true
                version {
                    desc = libraryDescription
                    gpg {
                        sign = true //Determines whether to GPG sign the files. The default is false
                        passphrase = _passphrase
                        //Optional. The passphrase for GPG signing'
                    }
                }
            }
        }
    }
}

def flavorChain(variant) {
    return tasks.create("${variant.flavorName}Publish") {
        def configPublishFunc = configPublish(variant)
        def configBintrayFunc = configBintray(variant)

        dependsOn 'clean'
        dependsOn 'assemble'
        dependsOn "${variant.name}SourcesJar"
        dependsOn "${variant.name}JavadocJar"
        dependsOn configPublishFunc
        dependsOn configBintrayFunc
        dependsOn install
        dependsOn 'bintrayUpload'

        tasks.findByName('assemble').mustRunAfter 'clean'
        tasks.findByName("${variant.name}SourcesJar").mustRunAfter 'assemble'
        tasks.findByName("${variant.name}JavadocJar").mustRunAfter "${variant.name}SourcesJar"
        configPublishFunc.mustRunAfter "${variant.name}JavadocJar"
        configBintrayFunc.mustRunAfter configPublishFunc
        install.mustRunAfter configBintrayFunc
        tasks.findByName('bintrayUpload').mustRunAfter install
    }
}

task publishFlavor {
    android.libraryVariants.all { variant ->
        // Skip debug publishing
        if (variant.buildType.name == "debug" || !variant.flavorName.equalsIgnoreCase("${flavorToBuild}")) {
            return
        }

        dependsOn flavorChain(variant)
    }
}